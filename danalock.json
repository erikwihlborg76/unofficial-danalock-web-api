[
    {
        "id": "f743ddd681cc39eb",
        "type": "tab",
        "label": "Danalock",
        "disabled": false,
        "info": ""
    },
    {
        "id": "74198965e3a3b6a7",
        "type": "group",
        "z": "f743ddd681cc39eb",
        "name": "Init flow variables, auth + retrieve list of locks",
        "style": {
            "label": true,
            "fill": "#92d04f",
            "fill-opacity": "0.1"
        },
        "nodes": [
            "0fdc18c5b24efc8d",
            "3822468c15b0e38e",
            "cc482ccc58f113b3",
            "9a98958a59427abe",
            "2a582bb42830b145",
            "3c94e6856665b13f",
            "569a66acf69babbb",
            "22f601aab6e8a0af",
            "27f9e2d9fd62267f",
            "179c893c38d921e4"
        ],
        "x": 34,
        "y": 39,
        "w": 1252,
        "h": 182
    },
    {
        "id": "2d2fa55353313fbd",
        "type": "group",
        "z": "f743ddd681cc39eb",
        "name": "Poll Danalock job status endpoint",
        "style": {
            "fill": "#ff7f7f",
            "label": true,
            "fill-opacity": "0.11"
        },
        "nodes": [
            "5b1c2675aa724161",
            "fe9aab048e33366b",
            "cb1930361388ef21",
            "df91e538f34332e0",
            "78ec499c761fd2f5",
            "c1375c2d65ae9af1",
            "f3ddb3529f6aaf6f",
            "302984209677bd1f",
            "7ae51c5882e5178a",
            "e4f62a5c9cc94fe8",
            "6936e6f2190666df",
            "5445fa9d77e280b6",
            "556764d9b03fadfc",
            "b9384ba3fda26881",
            "e1b47191373f4303",
            "ca4e68d5623677d3",
            "26757c610c315ed5",
            "d06e0740d9e883ed",
            "45fa8a69399bc6cd",
            "827ca9bb3764c6b2",
            "1294797949750889",
            "0ed97942e5b05de4"
        ],
        "x": 174,
        "y": 1259,
        "w": 1592,
        "h": 522
    },
    {
        "id": "18a575426409155a",
        "type": "group",
        "z": "f743ddd681cc39eb",
        "name": "API requests",
        "style": {
            "fill": "#0070c0",
            "fill-opacity": "0.1",
            "label": true
        },
        "nodes": [
            "9d785d0d2d8580ca",
            "b079271683184585",
            "bcc823a036178a40",
            "0ae030f2bb18dadf",
            "6d6298b928f2be46",
            "e6c40eca9fc88b65",
            "f6666dc856f5de04",
            "826a145f69f930c5",
            "f67e1136acf80458",
            "66fbe3391735734a",
            "823a9b7b83fd9918",
            "0bbcd6b34757855a",
            "150646388854eee8",
            "febc957c91ab347b",
            "8948ceb91c71d6e1",
            "f47f69fb754c3a24",
            "ea508a9258c9e422",
            "72fef43a2af5386b",
            "d861391a60c50a79",
            "6f377dfea76bcec4",
            "26240464f0b6023e",
            "0f14fb70c4ee942a",
            "2267bd5908d5de2b",
            "a4a3ee531cde6053",
            "5b06e390558482f3",
            "0cb5724e24fa121e",
            "f45dea6065559156",
            "3c9c6e5ba1b554de",
            "9db4d17dcab2459a",
            "e82ca3b2facc4a5e",
            "fb017ffbafad7392",
            "4c269421920beb64",
            "1ccfbb5395dfb856",
            "06ac3c53c11664e5"
        ],
        "x": 34,
        "y": 599,
        "w": 1672,
        "h": 602
    },
    {
        "id": "317d798aa4b70c00",
        "type": "group",
        "z": "f743ddd681cc39eb",
        "name": "Auth",
        "style": {
            "label": true,
            "fill": "#dbcbe7",
            "fill-opacity": "0.28"
        },
        "nodes": [
            "6bf03036090247ec",
            "7640cde3dc988ddf",
            "b3987d89acfdcc52",
            "1ac1b62251ea9f1c",
            "7799cba252dedbb3",
            "76b0811bda08fa12",
            "5e9fbfbe57151034",
            "f4e9513f2aa8cd57",
            "b2c720411abbd02a",
            "328e98a54f703688",
            "901c04abd0b8f0ee",
            "2d42c520f95a8610",
            "e67b1067d86a31b3",
            "8e03c3f67cf0525e",
            "6ff252db17af63a9",
            "5921f9fc69de6106",
            "c55808b8f9b29675"
        ],
        "x": 34,
        "y": 279,
        "w": 1632,
        "h": 262
    },
    {
        "id": "5b1c2675aa724161",
        "type": "http request",
        "z": "f743ddd681cc39eb",
        "g": "2d2fa55353313fbd",
        "name": "bridge API",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 630,
        "y": 1620,
        "wires": [
            [
                "302984209677bd1f"
            ]
        ]
    },
    {
        "id": "fe9aab048e33366b",
        "type": "function",
        "z": "f743ddd681cc39eb",
        "g": "2d2fa55353313fbd",
        "name": "prepare poll req",
        "func": "msg.headers = {};\n\nmsg.headers['Authorization'] = \"Bearer \"+ flow.get(\"accessToken\");\nmsg.method = \"POST\";\nmsg.url = \"https://bridge.danalockservices.com/bridge/v1/poll\";\n\nlet payload = msg.payload;\nmsg.payload = {};\n\nmsg.payload.id = payload.id;\n\nnode.log(`Preparing to query status of job ID ${payload.id}`)\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1620,
        "wires": [
            [
                "5b1c2675aa724161"
            ]
        ]
    },
    {
        "id": "cb1930361388ef21",
        "type": "switch",
        "z": "f743ddd681cc39eb",
        "g": "2d2fa55353313fbd",
        "name": "",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "InProgress",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Failed",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Succeeded",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 950,
        "y": 1600,
        "wires": [
            [
                "556764d9b03fadfc"
            ],
            [
                "e1b47191373f4303",
                "ca4e68d5623677d3"
            ],
            [
                "26757c610c315ed5",
                "5445fa9d77e280b6"
            ],
            [
                "d06e0740d9e883ed",
                "45fa8a69399bc6cd"
            ]
        ]
    },
    {
        "id": "df91e538f34332e0",
        "type": "delay",
        "z": "f743ddd681cc39eb",
        "g": "2d2fa55353313fbd",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1480,
        "y": 1300,
        "wires": [
            [
                "c1375c2d65ae9af1"
            ]
        ]
    },
    {
        "id": "78ec499c761fd2f5",
        "type": "http response",
        "z": "f743ddd681cc39eb",
        "g": "2d2fa55353313fbd",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1630,
        "y": 1540,
        "wires": []
    },
    {
        "id": "c1375c2d65ae9af1",
        "type": "link out",
        "z": "f743ddd681cc39eb",
        "g": "2d2fa55353313fbd",
        "name": "",
        "mode": "link",
        "links": [
            "f3ddb3529f6aaf6f"
        ],
        "x": 1605,
        "y": 1300,
        "wires": []
    },
    {
        "id": "f3ddb3529f6aaf6f",
        "type": "link in",
        "z": "f743ddd681cc39eb",
        "g": "2d2fa55353313fbd",
        "name": "poll in",
        "links": [
            "9d785d0d2d8580ca",
            "c1375c2d65ae9af1"
        ],
        "x": 325,
        "y": 1620,
        "wires": [
            [
                "fe9aab048e33366b"
            ]
        ]
    },
    {
        "id": "0fdc18c5b24efc8d",
        "type": "inject",
        "z": "f743ddd681cc39eb",
        "g": "74198965e3a3b6a7",
        "name": "at deploy",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "2a582bb42830b145"
            ]
        ]
    },
    {
        "id": "3822468c15b0e38e",
        "type": "link call",
        "z": "f743ddd681cc39eb",
        "g": "74198965e3a3b6a7",
        "name": "",
        "links": [
            "6bf03036090247ec"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 830,
        "y": 80,
        "wires": [
            [
                "cc482ccc58f113b3"
            ]
        ]
    },
    {
        "id": "cc482ccc58f113b3",
        "type": "link call",
        "z": "f743ddd681cc39eb",
        "g": "74198965e3a3b6a7",
        "name": "",
        "links": [
            "6d6298b928f2be46"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 980,
        "y": 80,
        "wires": [
            [
                "569a66acf69babbb"
            ]
        ]
    },
    {
        "id": "9a98958a59427abe",
        "type": "change",
        "z": "f743ddd681cc39eb",
        "g": "74198965e3a3b6a7",
        "name": "init flow vars",
        "rules": [
            {
                "t": "delete",
                "p": "locks",
                "pt": "flow"
            },
            {
                "t": "set",
                "p": "danalock_username",
                "pt": "flow",
                "to": "payload.username",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "danalock_password",
                "pt": "flow",
                "to": "payload.password",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "authRetryCount",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "authRetryCountLimit",
                "pt": "flow",
                "to": "3",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 80,
        "wires": [
            [
                "3822468c15b0e38e"
            ]
        ]
    },
    {
        "id": "302984209677bd1f",
        "type": "switch",
        "z": "f743ddd681cc39eb",
        "g": "2d2fa55353313fbd",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 1620,
        "wires": [
            [
                "cb1930361388ef21"
            ],
            [
                "827ca9bb3764c6b2"
            ]
        ]
    },
    {
        "id": "7ae51c5882e5178a",
        "type": "comment",
        "z": "f743ddd681cc39eb",
        "g": "2d2fa55353313fbd",
        "name": "poll in",
        "info": "",
        "x": 250,
        "y": 1620,
        "wires": []
    },
    {
        "id": "2a582bb42830b145",
        "type": "file in",
        "z": "f743ddd681cc39eb",
        "g": "74198965e3a3b6a7",
        "name": "read danalock.cfg",
        "filename": "danalock.cfg",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 326.6666666666667,
        "y": 80,
        "wires": [
            [
                "3c94e6856665b13f"
            ]
        ]
    },
    {
        "id": "3c94e6856665b13f",
        "type": "json",
        "z": "f743ddd681cc39eb",
        "g": "74198965e3a3b6a7",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 510,
        "y": 80,
        "wires": [
            [
                "9a98958a59427abe"
            ]
        ]
    },
    {
        "id": "9d785d0d2d8580ca",
        "type": "link out",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "",
        "mode": "link",
        "links": [
            "f3ddb3529f6aaf6f"
        ],
        "x": 1425,
        "y": 960,
        "wires": []
    },
    {
        "id": "b079271683184585",
        "type": "http request",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "bridge API",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 850,
        "y": 1020,
        "wires": [
            [
                "bcc823a036178a40"
            ]
        ]
    },
    {
        "id": "bcc823a036178a40",
        "type": "switch",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "cont",
                "v": "401",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1010,
        "y": 1020,
        "wires": [
            [
                "f45dea6065559156"
            ],
            [
                "72fef43a2af5386b"
            ],
            [
                "d861391a60c50a79"
            ]
        ]
    },
    {
        "id": "0ae030f2bb18dadf",
        "type": "http in",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "",
        "url": "/danalock/locks",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 800,
        "wires": [
            [
                "f67e1136acf80458"
            ]
        ]
    },
    {
        "id": "6d6298b928f2be46",
        "type": "link in",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "locks in",
        "links": [
            "1ccfbb5395dfb856"
        ],
        "x": 265,
        "y": 740,
        "wires": [
            [
                "f67e1136acf80458"
            ]
        ]
    },
    {
        "id": "e6c40eca9fc88b65",
        "type": "comment",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "Locks in",
        "info": "",
        "x": 180,
        "y": 740,
        "wires": []
    },
    {
        "id": "f6666dc856f5de04",
        "type": "delay",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1320,
        "y": 960,
        "wires": [
            [
                "9d785d0d2d8580ca"
            ]
        ]
    },
    {
        "id": "826a145f69f930c5",
        "type": "http in",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "",
        "url": "/danalock/:lock/state",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 920,
        "wires": [
            [
                "5b06e390558482f3",
                "06ac3c53c11664e5"
            ]
        ]
    },
    {
        "id": "f67e1136acf80458",
        "type": "function",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "prepare get locks req",
        "func": "msg.headers = {};\nmsg.headers[\"content-type\"] = \"application/json\"\nmsg.headers[\"Accept\"] = \"application/json\"\nmsg.headers['Authorization'] = \"Bearer \" + flow.get(\"accessToken\");\n\nmsg.method = \"GET\";\nmsg.url = \"https://api.danalock.com/locks/v1\";\n\nnode.log('Preparing to retrieve a list of locks');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 760,
        "wires": [
            [
                "66fbe3391735734a"
            ]
        ]
    },
    {
        "id": "66fbe3391735734a",
        "type": "http request",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "api.danalock.com",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 670,
        "y": 760,
        "wires": [
            [
                "9db4d17dcab2459a"
            ]
        ]
    },
    {
        "id": "823a9b7b83fd9918",
        "type": "link out",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "link out 15",
        "mode": "return",
        "links": [],
        "x": 1435,
        "y": 640,
        "wires": []
    },
    {
        "id": "0bbcd6b34757855a",
        "type": "switch",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "",
        "property": "_linkSource",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1310,
        "y": 680,
        "wires": [
            [
                "823a9b7b83fd9918"
            ],
            [
                "150646388854eee8"
            ]
        ]
    },
    {
        "id": "150646388854eee8",
        "type": "http response",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1470,
        "y": 700,
        "wires": []
    },
    {
        "id": "febc957c91ab347b",
        "type": "http in",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "",
        "url": "/danalock/:lock/lock",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 980,
        "wires": [
            [
                "5b06e390558482f3",
                "06ac3c53c11664e5"
            ]
        ]
    },
    {
        "id": "8948ceb91c71d6e1",
        "type": "http in",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "",
        "url": "/danalock/:lock/unlock",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 1040,
        "wires": [
            [
                "5b06e390558482f3",
                "06ac3c53c11664e5"
            ]
        ]
    },
    {
        "id": "f47f69fb754c3a24",
        "type": "function",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "prepare \"action\" req",
        "func": "msg.headers = {};\nmsg.headers[\"content-type\"] = \"application/json\"\nmsg.headers[\"Accept\"] = \"application/json\"\nmsg.headers['Authorization'] = \"Bearer \" + flow.get(\"accessToken\");\n\nmsg.method = \"POST\";\nmsg.url = \"https://bridge.danalockservices.com/bridge/v1/execute\";\n\n\nconst locks = flow.get(\"locks\");\nconst lockSerialNumber = locks.find(lock => lock.name == msg.req.params.lock).afi.serial_number;\n\nif (typeof lockSerialNumber === 'undefined')\n{\n    node.error('Failed to resolve the serial number of the lock ' + msg.req.params.lock + '.', msg);\n}\n\n// Resolve \"action\" from URL\nconst parts = msg.req.originalUrl.split('/');\n\n//const action = parts.at(3);\nconst action = parts.at(-1);\n\nmsg.action = action;\n\nswitch (msg.action) {\n    case \"state\": {\n        msg.payload = {\n            \"device\": lockSerialNumber,\n            \"operation\": \"afi.lock.get-state\"\n        }\n        break;\n    }\n    case \"lock\": {\n        msg.payload = {\n            \"device\": lockSerialNumber,\n            \"operation\": \"afi.lock.operate\",\n            \"arguments\": [\"lock\"]\n        }\n        break;\n    }\n    case \"unlock\": {\n        msg.payload = {\n            \"device\": lockSerialNumber,\n            \"operation\": \"afi.lock.operate\",\n            \"arguments\": [\"unlock\"]\n        }\n        break;\n    }\n    case \"battery\": {\n        msg.payload = {\n            \"device\": lockSerialNumber,\n            \"operation\": \"afi.power-source.get-information2\"\n        }\n        break;\n    }\n    default: {\n        node.warn(`The action ${msg.action} is not recognized`)\n    }\n}\n\nnode.log(`Preparing for action \"${action}\"`);\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1020,
        "wires": [
            [
                "b079271683184585"
            ]
        ]
    },
    {
        "id": "ea508a9258c9e422",
        "type": "http in",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "",
        "url": "/danalock/:lock/battery",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 1100,
        "wires": [
            [
                "5b06e390558482f3",
                "06ac3c53c11664e5"
            ]
        ]
    },
    {
        "id": "72fef43a2af5386b",
        "type": "link call",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "unauthorized",
        "links": [
            "6bf03036090247ec"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1190,
        "y": 1020,
        "wires": [
            [
                "0f14fb70c4ee942a"
            ]
        ]
    },
    {
        "id": "d861391a60c50a79",
        "type": "function",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "otherwise throw error",
        "func": "node.error(`Unhandled outcome`, msg)\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "6f377dfea76bcec4",
        "type": "link in",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "bridge in",
        "links": [
            "0f14fb70c4ee942a"
        ],
        "x": 265,
        "y": 1160,
        "wires": [
            [
                "5b06e390558482f3"
            ]
        ]
    },
    {
        "id": "26240464f0b6023e",
        "type": "comment",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "bridge in",
        "info": "",
        "x": 140,
        "y": 1160,
        "wires": []
    },
    {
        "id": "0f14fb70c4ee942a",
        "type": "link out",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "",
        "mode": "link",
        "links": [
            "6f377dfea76bcec4"
        ],
        "x": 1425,
        "y": 1020,
        "wires": []
    },
    {
        "id": "2267bd5908d5de2b",
        "type": "comment",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "bridge in",
        "info": "",
        "x": 1510,
        "y": 1020,
        "wires": []
    },
    {
        "id": "a4a3ee531cde6053",
        "type": "comment",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "poll in",
        "info": "",
        "x": 1500,
        "y": 960,
        "wires": []
    },
    {
        "id": "6bf03036090247ec",
        "type": "link in",
        "z": "f743ddd681cc39eb",
        "g": "317d798aa4b70c00",
        "name": "auth in",
        "links": [],
        "x": 325,
        "y": 460,
        "wires": [
            [
                "e67b1067d86a31b3"
            ]
        ]
    },
    {
        "id": "7640cde3dc988ddf",
        "type": "comment",
        "z": "f743ddd681cc39eb",
        "g": "317d798aa4b70c00",
        "name": "auth in",
        "info": "",
        "x": 250,
        "y": 460,
        "wires": []
    },
    {
        "id": "b3987d89acfdcc52",
        "type": "link out",
        "z": "f743ddd681cc39eb",
        "g": "317d798aa4b70c00",
        "name": "return to callling link node",
        "mode": "return",
        "links": [],
        "x": 1395,
        "y": 320,
        "wires": []
    },
    {
        "id": "1ac1b62251ea9f1c",
        "type": "function",
        "z": "f743ddd681cc39eb",
        "g": "317d798aa4b70c00",
        "name": "prepare auth req",
        "func": "\nmsg.headers = {};\nmsg.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\nmsg.method = \"POST\";\nmsg.url = \"https://api.danalock.com/oauth2/token\";\n\nconst username = flow.get(\"danalock_username\");\nconst password = flow.get(\"danalock_password\")\n\nmsg.payload =\n{\n    \"grant_type\": \"password\",\n    \"username\": username,\n    \"password\": password,\n    \"client_id\": \"danalock-web\"\n}\n\nnode.log(`Preparing to retrieve an access token.`)\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 440,
        "wires": [
            [
                "7799cba252dedbb3"
            ]
        ]
    },
    {
        "id": "7799cba252dedbb3",
        "type": "http request",
        "z": "f743ddd681cc39eb",
        "g": "317d798aa4b70c00",
        "name": "api.danalock.com",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 420,
        "wires": [
            [
                "901c04abd0b8f0ee"
            ]
        ]
    },
    {
        "id": "76b0811bda08fa12",
        "type": "inject",
        "z": "f743ddd681cc39eb",
        "g": "317d798aa4b70c00",
        "name": "refresh access token every 10h",
        "props": [],
        "repeat": "36000",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 380,
        "wires": [
            [
                "5e9fbfbe57151034"
            ]
        ]
    },
    {
        "id": "5e9fbfbe57151034",
        "type": "function",
        "z": "f743ddd681cc39eb",
        "g": "317d798aa4b70c00",
        "name": "prepare auth req",
        "func": "\nmsg.headers = {};\nmsg.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\nmsg.method = \"POST\";\nmsg.url = \"https://api.danalock.com/oauth2/token\";\n\nmsg.payload =\n{\n    \"grant_type\": \"refresh_token\",\n    \"refresh_token\": flow.get(\"refreshToken\"),\n    \"client_id\": \"danalock-web\"\n}\n\n\nnode.log(`Preparing a scheduled refresh of the access token.`)\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 380,
        "wires": [
            [
                "7799cba252dedbb3"
            ]
        ]
    },
    {
        "id": "f4e9513f2aa8cd57",
        "type": "switch",
        "z": "f743ddd681cc39eb",
        "g": "317d798aa4b70c00",
        "name": "",
        "property": "_linkSource",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1270,
        "y": 360,
        "wires": [
            [
                "b3987d89acfdcc52"
            ],
            [
                "b2c720411abbd02a"
            ]
        ]
    },
    {
        "id": "b2c720411abbd02a",
        "type": "function",
        "z": "f743ddd681cc39eb",
        "g": "317d798aa4b70c00",
        "name": "do nothing mode",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "328e98a54f703688",
        "type": "comment",
        "z": "f743ddd681cc39eb",
        "g": "317d798aa4b70c00",
        "name": "return to callling link node",
        "info": "",
        "x": 1530,
        "y": 320,
        "wires": []
    },
    {
        "id": "e4f62a5c9cc94fe8",
        "type": "comment",
        "z": "f743ddd681cc39eb",
        "g": "2d2fa55353313fbd",
        "name": "poll in",
        "info": "",
        "x": 1690,
        "y": 1300,
        "wires": []
    },
    {
        "id": "569a66acf69babbb",
        "type": "function",
        "z": "f743ddd681cc39eb",
        "g": "74198965e3a3b6a7",
        "name": "flow init completed",
        "func": "node.log(`Flow init completed.`);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "6936e6f2190666df",
        "type": "function",
        "z": "f743ddd681cc39eb",
        "g": "2d2fa55353313fbd",
        "name": "in progress",
        "func": "msg.pollRetryCount++;\n\nnode.log(`Job still in progress... Retrying with a delay`);\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 1300,
        "wires": [
            [
                "df91e538f34332e0"
            ]
        ]
    },
    {
        "id": "5445fa9d77e280b6",
        "type": "debug",
        "z": "f743ddd681cc39eb",
        "g": "2d2fa55353313fbd",
        "name": "completed 👍",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 1640,
        "wires": []
    },
    {
        "id": "5b06e390558482f3",
        "type": "delay",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "",
        "pauseType": "rate",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 425,
        "y": 1020,
        "wires": [
            [
                "f47f69fb754c3a24"
            ]
        ]
    },
    {
        "id": "556764d9b03fadfc",
        "type": "switch",
        "z": "f743ddd681cc39eb",
        "g": "2d2fa55353313fbd",
        "name": "",
        "property": "pollRetryCount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lte",
                "v": "10",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1130,
        "y": 1380,
        "wires": [
            [
                "6936e6f2190666df",
                "0ed97942e5b05de4"
            ],
            [
                "b9384ba3fda26881",
                "1294797949750889"
            ]
        ]
    },
    {
        "id": "901c04abd0b8f0ee",
        "type": "switch",
        "z": "f743ddd681cc39eb",
        "g": "317d798aa4b70c00",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 970,
        "y": 420,
        "wires": [
            [
                "2d42c520f95a8610"
            ],
            [
                "c55808b8f9b29675"
            ]
        ]
    },
    {
        "id": "0cb5724e24fa121e",
        "type": "comment",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "return to calling link node",
        "info": "",
        "x": 1570,
        "y": 640,
        "wires": []
    },
    {
        "id": "f45dea6065559156",
        "type": "function",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "ok",
        "func": "node.log(`Danalock Bridge accepted the request. The job ID is \"${msg.payload.id}\".`)\nflow.set(\"retryAuthCount\", 0);\n\nmsg.pollRetryCount = 0;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 960,
        "wires": [
            [
                "f6666dc856f5de04"
            ]
        ]
    },
    {
        "id": "3c9c6e5ba1b554de",
        "type": "function",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "otherwise throw error",
        "func": "node.error(`Request to retrieve locks failed`, msg);\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "9db4d17dcab2459a",
        "type": "switch",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "401",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 830,
        "y": 760,
        "wires": [
            [
                "e82ca3b2facc4a5e"
            ],
            [
                "fb017ffbafad7392"
            ],
            [
                "3c9c6e5ba1b554de"
            ]
        ]
    },
    {
        "id": "e82ca3b2facc4a5e",
        "type": "function",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "ok",
        "func": "let locks = [];\n\nmsg.payload.forEach(lock => {\n    locks.push(lock.name);\n});\n\nif (locks.length > 0) {\n\n    flow.set(\"locks\", msg.payload);\n    node.log(`Locks found: ${locks.join(\",\")}`);\n}\nelse {\n    node.warn('Request was successful, but no locks were found.')\n    return msg;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 680,
        "wires": [
            [
                "0bbcd6b34757855a"
            ]
        ]
    },
    {
        "id": "2d42c520f95a8610",
        "type": "function",
        "z": "f743ddd681cc39eb",
        "g": "317d798aa4b70c00",
        "name": "ok",
        "func": "flow.set(\"accessToken\", msg.payload.access_token);\nflow.set(\"refreshToken\", msg.payload.refresh_token);\n\nflow.set(\"retryAuthCount\", 0);\n\n\nnode.log(`Successfully retrieved an access token`)\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 360,
        "wires": [
            [
                "f4e9513f2aa8cd57"
            ]
        ]
    },
    {
        "id": "e67b1067d86a31b3",
        "type": "switch",
        "z": "f743ddd681cc39eb",
        "g": "317d798aa4b70c00",
        "name": "",
        "property": "authRetryCount",
        "propertyType": "flow",
        "rules": [
            {
                "t": "lte",
                "v": "authRetryCountLimit",
                "vt": "flow"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 410,
        "y": 460,
        "wires": [
            [
                "1ac1b62251ea9f1c"
            ],
            [
                "8e03c3f67cf0525e"
            ]
        ]
    },
    {
        "id": "8e03c3f67cf0525e",
        "type": "function",
        "z": "f743ddd681cc39eb",
        "g": "317d798aa4b70c00",
        "name": "too many auth retries",
        "func": "flow.set(\"accessToken\", \"NOT SET\")\nflow.set(\"refreshToken\", \"NOT SET\")\n\nnode.error(`Too many auth retries. Allowed retries is set to #${flow.get(\"retryAuthCountLimit\")}.`, msg)\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "6ff252db17af63a9",
        "type": "delay",
        "z": "f743ddd681cc39eb",
        "g": "317d798aa4b70c00",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1280,
        "y": 460,
        "wires": [
            [
                "5921f9fc69de6106"
            ]
        ]
    },
    {
        "id": "5921f9fc69de6106",
        "type": "link call",
        "z": "f743ddd681cc39eb",
        "g": "317d798aa4b70c00",
        "name": "",
        "links": [
            "6bf03036090247ec"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1430,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "c55808b8f9b29675",
        "type": "function",
        "z": "f743ddd681cc39eb",
        "g": "317d798aa4b70c00",
        "name": "otherwise",
        "func": "node.warn(`Failed to retrieve an access token.`)\n\nlet authRetryCount = flow.get(\"authRetryCount\");\nauthRetryCount++;\n\nflow.set(\"authRetryCount\", authRetryCount);\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 460,
        "wires": [
            [
                "6ff252db17af63a9"
            ]
        ]
    },
    {
        "id": "fb017ffbafad7392",
        "type": "link call",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "unauthorized",
        "links": [
            "6bf03036090247ec"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 990,
        "y": 760,
        "wires": [
            [
                "1ccfbb5395dfb856"
            ]
        ]
    },
    {
        "id": "1ccfbb5395dfb856",
        "type": "link out",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "locks in",
        "mode": "link",
        "links": [
            "6d6298b928f2be46"
        ],
        "x": 1435,
        "y": 760,
        "wires": []
    },
    {
        "id": "4c269421920beb64",
        "type": "comment",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "locks in",
        "info": "",
        "x": 1510,
        "y": 760,
        "wires": []
    },
    {
        "id": "b9384ba3fda26881",
        "type": "function",
        "z": "f743ddd681cc39eb",
        "g": "2d2fa55353313fbd",
        "name": "too many retries",
        "func": "node.log(`Job still in progress. Too many retries. Exiting the flow.`);\n\nmsg.payload = \"Too many retries. Still in progress.\"\n\n//msg.payload = msg.payload.status;\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 1400,
        "wires": [
            [
                "78ec499c761fd2f5"
            ]
        ]
    },
    {
        "id": "e1b47191373f4303",
        "type": "function",
        "z": "f743ddd681cc39eb",
        "g": "2d2fa55353313fbd",
        "name": "failed",
        "func": "/*\nlet payload = msg.payload;\nmsg.payload = {};\nmsg.payload.state = payload.result.state;\n*/\n\n/*  RESPONSE EXAMPLES\n\n[EXAMPLE #1]\n\npayload: object\nid: \"ac85e0b6-8174-480b-ae25-5578e6ad9e41\"\nstatus: \"Failed\"\nresult: object\n    afi_status: 7\n    afi_status_text: \"NothingChanged\"\n    dmi_status: 18\n    dmi_status_text: \"ApplicationLayerProtocolError\"\n\n[EXAMPLE #2]\n\npayload: object\nid: \"bf32be5c-90f2-4a6c-952c-396ea28666b9\"\nstatus: \"Failed\"\nresult: object\n    dmi_status: 15\n    dmi_status_text: \"ConnectionLost\"\n*/\n\n\n\n\nnode.log(`Job ID ${msg.payload.id} failed to complete. ${msg.payload.text}`);\n\nmsg.payload =  msg.payload.result.afi_status_text;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 1500,
        "wires": [
            [
                "78ec499c761fd2f5"
            ]
        ]
    },
    {
        "id": "ca4e68d5623677d3",
        "type": "debug",
        "z": "f743ddd681cc39eb",
        "g": "2d2fa55353313fbd",
        "name": "failed 🛑",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 1540,
        "wires": []
    },
    {
        "id": "26757c610c315ed5",
        "type": "function",
        "z": "f743ddd681cc39eb",
        "g": "2d2fa55353313fbd",
        "name": "completed",
        "func": "let payload = msg.payload;\nmsg.payload = {};\n\n\nswitch (msg.action) {\n    case \"state\": {\n        msg.payload = payload.result.state\n        break;\n    }\n    case \"lock\": {\n        //msg.payload = payload.result.afi_status_text;\n        msg.payload = \"Locked\";\n        break;\n    }\n    case \"unlock\": {\n        //msg.payload = payload.result.afi_status_text;\n        msg.payload = \"Unlocked\";\n        break;\n    }\n    case \"battery\": {\n        msg.payload = payload.result.battery_level;\n        break;\n    }    \n\n    default: {\n        node.warn(`The action ${msg.action} is not recognized`)\n    }\n}\n\nnode.log(`Job ID ${payload.id} completed successfully.`);\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 1600,
        "wires": [
            [
                "78ec499c761fd2f5"
            ]
        ]
    },
    {
        "id": "d06e0740d9e883ed",
        "type": "function",
        "z": "f743ddd681cc39eb",
        "g": "2d2fa55353313fbd",
        "name": "otherwise throw error",
        "func": "node.error(`Unhandled outcome`, msg)\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "45fa8a69399bc6cd",
        "type": "debug",
        "z": "f743ddd681cc39eb",
        "g": "2d2fa55353313fbd",
        "name": "otherwise",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 1740,
        "wires": []
    },
    {
        "id": "827ca9bb3764c6b2",
        "type": "function",
        "z": "f743ddd681cc39eb",
        "g": "2d2fa55353313fbd",
        "name": "otherwise throw error",
        "func": "node.error(`Unhandled outcome`, msg)\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "22f601aab6e8a0af",
        "type": "catch",
        "z": "f743ddd681cc39eb",
        "g": "74198965e3a3b6a7",
        "name": "",
        "scope": [
            "2a582bb42830b145"
        ],
        "uncaught": false,
        "x": 130,
        "y": 180,
        "wires": [
            [
                "27f9e2d9fd62267f"
            ]
        ]
    },
    {
        "id": "27f9e2d9fd62267f",
        "type": "change",
        "z": "f743ddd681cc39eb",
        "g": "74198965e3a3b6a7",
        "name": "set credentials",
        "rules": [
            {
                "t": "set",
                "p": "payload.username",
                "pt": "msg",
                "to": "Your Danalock username",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.password",
                "pt": "msg",
                "to": "Your Danalock password",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 180,
        "wires": [
            [
                "9a98958a59427abe"
            ]
        ]
    },
    {
        "id": "179c893c38d921e4",
        "type": "comment",
        "z": "f743ddd681cc39eb",
        "g": "74198965e3a3b6a7",
        "name": "Fallback for users who can´s use danalock.json",
        "info": "",
        "x": 260,
        "y": 140,
        "wires": []
    },
    {
        "id": "1294797949750889",
        "type": "debug",
        "z": "f743ddd681cc39eb",
        "g": "2d2fa55353313fbd",
        "name": "too many retries ⚠️",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 1440,
        "wires": []
    },
    {
        "id": "06ac3c53c11664e5",
        "type": "debug",
        "z": "f743ddd681cc39eb",
        "g": "18a575426409155a",
        "name": "new request ✅",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 1100,
        "wires": []
    },
    {
        "id": "0ed97942e5b05de4",
        "type": "debug",
        "z": "f743ddd681cc39eb",
        "g": "2d2fa55353313fbd",
        "name": "in progress ⌛",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 1340,
        "wires": []
    }
]